type prop = { name: string, kind: string, isEvent: bool };

/* domProps contains all React.component's DOM Props.
  current list: https://gist.github.com/davesnx/22f0e81b6d7450e3e0dcc157595426f2
  taken from: https://github.com/reasonml/reason-react/blob/master/src/ReactDOMRe.re
*/
let domPropsList = [
  { name: "key", kind: "string", isEvent: false },
  { name: "ref", kind: "domRef", isEvent: false },
  /* accessibility */
  /* Currently we don't support accessibility, since there's a bs.as "aria-whatever" */
  /* https://www.w3.org/TR/wai-aria-1.1/ */
  /* https://accessibilityresources.org/<aria-tag> is a great resource for these */
  /* { name: "ariaDetails", kind: "string", isEvent: false },
  { name: "ariaDisabled", kind: "bool", isEvent: false },
  { name: "ariaHidden", kind: "bool", isEvent: false },
  { name: "ariaKeyshortcuts", kind: "string", isEvent: false },
  { name: "ariaLabel", kind: "string", isEvent: false },
  { name: "ariaRoledescription", kind: "string", isEvent: false },
  /* Widget Attributes */
  { name: "ariaExpanded", kind: "bool", isEvent: false },
  { name: "ariaLevel", kind: "int", isEvent: false },
  { name: "ariaModal", kind: "bool", isEvent: false },
  { name: "ariaMultiline", kind: "bool", isEvent: false },
  { name: "ariaMultiselectable", kind: "bool", isEvent: false },
  { name: "ariaPlaceholder", kind: "string", isEvent: false },
  { name: "ariaReadonly", kind: "bool", isEvent: false },
  { name: "ariaRequired", kind: "bool", isEvent: false },
  { name: "ariaSelected", kind: "bool", isEvent: false },
  { name: "ariaSort", kind: "string", isEvent: false },
  { name: "ariaValuemax", kind: "float", isEvent: false },
  { name: "ariaValuemin", kind: "float", isEvent: false },
  { name: "ariaValuenow", kind: "float", isEvent: false },
  { name: "ariaValuetext", kind: "string", isEvent: false }, */
  /* Live Region Attributes */
  /* { name: "ariaAtomic", kind: "bool", isEvent: false },
  { name: "ariaBusy", kind: "bool", isEvent: false },
  { name: "ariaRelevant", kind: "string", isEvent: false }, */
  /* Drag-and-Drop Attributes */
  /* { name: "ariaGrabbed", kind: "bool", isEvent: false }, */
  /* Relationship Attributes */
  /* { name: "ariaActivedescendant", kind: "string", isEvent: false },
  { name: "ariaColcount", kind: "int", isEvent: false },
  { name: "ariaColindex", kind: "int", isEvent: false },
  { name: "ariaColspan", kind: "int", isEvent: false },
  { name: "ariaControls", kind: "string", isEvent: false },
  { name: "ariaDescribedby", kind: "string", isEvent: false },
  { name: "ariaErrormessage", kind: "string", isEvent: false },
  { name: "ariaFlowto", kind: "string", isEvent: false },
  { name: "ariaLabelledby", kind: "string", isEvent: false },
  { name: "ariaOwns", kind: "string", isEvent: false },
  { name: "ariaPosinset", kind: "int", isEvent: false },
  { name: "ariaRowcount", kind: "int", isEvent: false },
  { name: "ariaRowindex", kind: "int", isEvent: false },
  { name: "ariaRowspan", kind: "int", isEvent: false },
  { name: "ariaSetsize", kind: "int", isEvent: false }, */
  /* react textarea/input */
  { name: "defaultChecked", kind: "bool", isEvent: false },
  { name: "defaultValue", kind: "string", isEvent: false },
  /* global html attributes */
  { name: "accessKey", kind: "string", isEvent: false },
  { name: "className", kind: "string", isEvent: false }, /* substitute for "class" */
  { name: "contentEditable", kind: "bool", isEvent: false },
  { name: "contextMenu", kind: "string", isEvent: false },
  { name: "dir", kind: "string", isEvent: false }, /* "ltr", "rtl" or "auto" */
  { name: "draggable", kind: "bool", isEvent: false },
  { name: "hidden", kind: "bool", isEvent: false },
  { name: "id", kind: "string", isEvent: false },
  { name: "lang", kind: "string", isEvent: false },
  { name: "role", kind: "string", isEvent: false }, /* ARIA role */
  /* style */ /* "TODO", "We don't support to override styles yet */
  { name: "spellCheck", kind: "bool", isEvent: false },
  { name: "tabIndex", kind: "int", isEvent: false },
  { name: "title", kind: "string", isEvent: false },
  /* html5 microdata */
  { name: "itemID", kind: "string", isEvent: false },
  { name: "itemProp", kind: "string", isEvent: false },
  { name: "itemRef", kind: "string", isEvent: false },
  { name: "itemScope", kind: "bool", isEvent: false },
  { name: "itemType", kind: "string", isEvent: false }, /* uri */
  /* tag-specific html attributes */
  { name: "accept", kind: "string", isEvent: false },
  { name: "acceptCharset", kind: "string", isEvent: false },
  { name: "action", kind: "string", isEvent: false }, /* uri */
  { name: "allowFullScreen", kind: "bool", isEvent: false },
  { name: "alt", kind: "string", isEvent: false },
  { name: "async", kind: "bool", isEvent: false },
  { name: "autoComplete", kind: "string", isEvent: false }, /* has a fixed, but large-ish, set of possible values */
  { name: "autoFocus", kind: "bool", isEvent: false },
  { name: "autoPlay", kind: "bool", isEvent: false },
  { name: "challenge", kind: "string", isEvent: false },
  { name: "charSet", kind: "string", isEvent: false },
  { name: "checked", kind: "bool", isEvent: false },
  { name: "cite", kind: "string", isEvent: false }, /* uri */
  { name: "crossorigin", kind: "bool", isEvent: false },
  { name: "cols", kind: "int", isEvent: false },
  { name: "colSpan", kind: "int", isEvent: false },
  { name: "content", kind: "string", isEvent: false },
  { name: "controls", kind: "bool", isEvent: false },
  { name: "coords", kind: "string", isEvent: false }, /* set of values specifying the coordinates of a region */
  { name: "data", kind: "string", isEvent: false }, /* uri */
  { name: "dateTime", kind: "string", isEvent: false }, /* "valid date string with optional time" */
  { name: "default", kind: "bool", isEvent: false },
  { name: "defer", kind: "bool", isEvent: false },
  { name: "disabled", kind: "bool", isEvent: false },
  { name: "download", kind: "string", isEvent: false }, /* should really be either a boolean, signifying presence, or a string */
  { name: "encType", kind: "string", isEvent: false }, /* "application/x-www-form-urlencoded", "multipart/form-data" or "text/plain" */
  { name: "form", kind: "string", isEvent: false },
  { name: "formAction", kind: "string", isEvent: false }, /* uri */
  { name: "formTarget", kind: "string", isEvent: false }, /* "_blank", "_self", etc. */
  { name: "formMethod", kind: "string", isEvent: false }, /* "post", "get", "put" */
  { name: "headers", kind: "string", isEvent: false },
  { name: "height", kind: "string", isEvent: false }, /* in html5 this can only be a number, but in html4 it can ba a percentage as well */
  { name: "high", kind: "int", isEvent: false },
  { name: "href", kind: "string", isEvent: false }, /* uri */
  { name: "hrefLang", kind: "string", isEvent: false },
  { name: "htmlFor", kind: "string", isEvent: false }, /* substitute for for */
  { name: "httpEquiv", kind: "string", isEvent: false }, /* has a fixed set of possible values */
  { name: "icon", kind: "string", isEvent: false }, /* uri? */
  { name: "inputMode", kind: "string", isEvent: false }, /* "verbatim", "latin", "numeric", etc. */
  { name: "integrity", kind: "string", isEvent: false },
  { name: "keyType", kind: "string", isEvent: false },
  { name: "kind", kind: "string", isEvent: false }, /* has a fixed set of possible values */
  { name: "label", kind: "string", isEvent: false },
  { name: "list", kind: "string", isEvent: false },
  { name: "loop", kind: "bool", isEvent: false },
  { name: "low", kind: "int", isEvent: false },
  { name: "manifest", kind: "string", isEvent: false }, /* uri */
  { name: "max", kind: "string", isEvent: false }, /* should be int or Js.Date.t */
  { name: "maxLength", kind: "int", isEvent: false },
  { name: "media", kind: "string", isEvent: false }, /* a valid media query */
  { name: "mediaGroup", kind: "string", isEvent: false },
  { name: "method", kind: "string", isEvent: false }, /* "post" or "get" */
  { name: "min", kind: "int", isEvent: false },
  { name: "minLength", kind: "int", isEvent: false },
  { name: "multiple", kind: "bool", isEvent: false },
  { name: "muted", kind: "bool", isEvent: false },
  { name: "name", kind: "string", isEvent: false },
  { name: "nonce", kind: "string", isEvent: false },
  { name: "noValidate", kind: "bool", isEvent: false },
  { name: "open_", kind: "bool", isEvent: false }, /* use this one. Previous one is deprecated */
  { name: "optimum", kind: "int", isEvent: false },
  { name: "pattern", kind: "string", isEvent: false }, /* valid Js RegExp */
  { name: "placeholder", kind: "string", isEvent: false },
  { name: "poster", kind: "string", isEvent: false }, /* uri */
  { name: "preload", kind: "string", isEvent: false }, /* "none", "metadata" or "auto" (and "" as a synonym for "auto") */
  { name: "radioGroup", kind: "string", isEvent: false },
  { name: "readOnly", kind: "bool", isEvent: false },
  { name: "rel", kind: "string", isEvent: false }, /* a space- or comma-separated (depending on the element) list of a fixed set of "link types" */
  { name: "required", kind: "bool", isEvent: false },
  { name: "reversed", kind: "bool", isEvent: false },
  { name: "rows", kind: "int", isEvent: false },
  { name: "rowSpan", kind: "int", isEvent: false },
  { name: "sandbox", kind: "string", isEvent: false }, /* has a fixed set of possible values */
  { name: "scope", kind: "string", isEvent: false }, /* has a fixed set of possible values */
  { name: "scoped", kind: "bool", isEvent: false },
  { name: "scrolling", kind: "string", isEvent: false }, /* html4 only, "auto", "yes" or "no" */
  /* seamless - supported by React, but removed from the html5 spec */
  { name: "selected", kind: "bool", isEvent: false },
  { name: "shape", kind: "string", isEvent: false },
  { name: "size", kind: "int", isEvent: false },
  { name: "sizes", kind: "string", isEvent: false },
  { name: "span", kind: "int", isEvent: false },
  { name: "src", kind: "string", isEvent: false }, /* uri */
  { name: "srcDoc", kind: "string", isEvent: false },
  { name: "srcLang", kind: "string", isEvent: false },
  { name: "srcSet", kind: "string", isEvent: false },
  { name: "start", kind: "int", isEvent: false },
  { name: "step", kind: "float", isEvent: false },
  { name: "summary", kind: "string", isEvent: false }, /* deprecated */
  { name: "target", kind: "string", isEvent: false },
  { name: "type_", kind: "string", isEvent: false }, /* has a fixed but large-ish set of possible values */ /* use this one. Previous one is deprecated */
  { name: "useMap", kind: "string", isEvent: false },
  { name: "value", kind: "string", isEvent: false },
  { name: "width", kind: "string", isEvent: false }, /* in html5 this can only be a number, but in html4 it can ba a percentage as well */
  { name: "wrap", kind: "string", isEvent: false }, /* "hard" or "soft" */
  /* Clipboard events */
  { name: "onCopy", kind: "Clipboard", isEvent: true },
  { name: "onCut", kind: "Clipboard", isEvent: true },
  { name: "onPaste", kind: "Clipboard", isEvent: true },
  /* Composition events */
  { name: "onCompositionEnd", kind: "Composition", isEvent: true },
  { name: "onCompositionStart", kind: "Composition", isEvent: true },
  { name: "onCompositionUpdate", kind: "Composition", isEvent: true },
  /* Keyboard events */
  { name: "onKeyDown", kind: "Keyboard", isEvent: true },
  { name: "onKeyPress", kind: "Keyboard", isEvent: true },
  { name: "onKeyUp", kind: "Keyboard", isEvent: true },
  /* Focus events */
  { name: "onFocus", kind: "Focus", isEvent: true },
  { name: "onBlur", kind: "Focus", isEvent: true },
  /* Form events */
  { name: "onChange", kind: "Form", isEvent: true },
  { name: "onInput", kind: "Form", isEvent: true },
  { name: "onSubmit", kind: "Form", isEvent: true },
  /* Mouse events */
  { name: "onClick", kind: "Mouse", isEvent: true },
  { name: "onContextMenu", kind: "Mouse", isEvent: true },
  { name: "onDoubleClick", kind: "Mouse", isEvent: true },
  { name: "onDrag", kind: "Mouse", isEvent: true },
  { name: "onDragEnd", kind: "Mouse", isEvent: true },
  { name: "onDragEnter", kind: "Mouse", isEvent: true },
  { name: "onDragExit", kind: "Mouse", isEvent: true },
  { name: "onDragLeave", kind: "Mouse", isEvent: true },
  { name: "onDragOver", kind: "Mouse", isEvent: true },
  { name: "onDragStart", kind: "Mouse", isEvent: true },
  { name: "onDrop", kind: "Mouse", isEvent: true },
  { name: "onMouseDown", kind: "Mouse", isEvent: true },
  { name: "onMouseEnter", kind: "Mouse", isEvent: true },
  { name: "onMouseLeave", kind: "Mouse", isEvent: true },
  { name: "onMouseMove", kind: "Mouse", isEvent: true },
  { name: "onMouseOut", kind: "Mouse", isEvent: true },
  { name: "onMouseOver", kind: "Mouse", isEvent: true },
  { name: "onMouseUp", kind: "Mouse", isEvent: true },
  /* Selection events */
  { name: "onSelect", kind: "Selection", isEvent: true },
  /* Touch events */
  { name: "onTouchCancel", kind: "Touch", isEvent: true },
  { name: "onTouchEnd", kind: "Touch", isEvent: true },
  { name: "onTouchMove", kind: "Touch", isEvent: true },
  { name: "onTouchStart", kind: "Touch", isEvent: true },
  /* UI events */
  { name: "onScroll", kind: "UI", isEvent: true },
  /* Wheel events */
  { name: "onWheel", kind: "Wheel", isEvent: true },
  /* Media events */
  { name: "onAbort", kind: "Media", isEvent: true },
  { name: "onCanPlay", kind: "Media", isEvent: true },
  { name: "onCanPlayThrough", kind: "Media", isEvent: true },
  { name: "onDurationChange", kind: "Media", isEvent: true },
  { name: "onEmptied", kind: "Media", isEvent: true },
  { name: "onEncrypetd", kind: "Media", isEvent: true },
  { name: "onEnded", kind: "Media", isEvent: true },
  { name: "onError", kind: "Media", isEvent: true },
  { name: "onLoadedData", kind: "Media", isEvent: true },
  { name: "onLoadedMetadata", kind: "Media", isEvent: true },
  { name: "onLoadStart", kind: "Media", isEvent: true },
  { name: "onPause", kind: "Media", isEvent: true },
  { name: "onPlay", kind: "Media", isEvent: true },
  { name: "onPlaying", kind: "Media", isEvent: true },
  { name: "onProgress", kind: "Media", isEvent: true },
  { name: "onRateChange", kind: "Media", isEvent: true },
  { name: "onSeeked", kind: "Media", isEvent: true },
  { name: "onSeeking", kind: "Media", isEvent: true },
  { name: "onStalled", kind: "Media", isEvent: true },
  { name: "onSuspend", kind: "Media", isEvent: true },
  { name: "onTimeUpdate", kind: "Media", isEvent: true },
  { name: "onVolumeChange", kind: "Media", isEvent: true },
  { name: "onWaiting", kind: "Media", isEvent: true },
  /* Image events */
  /* Animation events */
  { name: "onAnimationStart", kind: "Animation", isEvent: true },
  { name: "onAnimationEnd", kind: "Animation", isEvent: true },
  { name: "onAnimationIteration", kind: "Animation", isEvent: true },
  /* Transition events */
  { name: "onTransitionEnd", kind: "Transition", isEvent: true },
  /* svg */
  { name: "accentHeight", kind: "string", isEvent: false },
  { name: "accumulate", kind: "string", isEvent: false },
  { name: "additive", kind: "string", isEvent: false },
  { name: "alignmentBaseline", kind: "string", isEvent: false },
  { name: "allowReorder", kind: "string", isEvent: false },
  { name: "alphabetic", kind: "string", isEvent: false },
  { name: "amplitude", kind: "string", isEvent: false },
  { name: "arabicForm", kind: "string", isEvent: false },
  { name: "ascent", kind: "string", isEvent: false },
  { name: "attributeName", kind: "string", isEvent: false },
  { name: "attributeType", kind: "string", isEvent: false },
  { name: "autoReverse", kind: "string", isEvent: false },
  { name: "azimuth", kind: "string", isEvent: false },
  { name: "baseFrequency", kind: "string", isEvent: false },
  { name: "baseProfile", kind: "string", isEvent: false },
  { name: "baselineShift", kind: "string", isEvent: false },
  { name: "bbox", kind: "string", isEvent: false },
  { name: "begin_", kind: "string", isEvent: false }, /* use this one. Previous one is deprecated */
  { name: "bias", kind: "string", isEvent: false },
  { name: "by", kind: "string", isEvent: false },
  { name: "calcMode", kind: "string", isEvent: false },
  { name: "capHeight", kind: "string", isEvent: false },
  { name: "clip", kind: "string", isEvent: false },
  { name: "clipPath", kind: "string", isEvent: false },
  { name: "clipPathUnits", kind: "string", isEvent: false },
  { name: "clipRule", kind: "string", isEvent: false },
  { name: "colorInterpolation", kind: "string", isEvent: false },
  { name: "colorInterpolationFilters", kind: "string", isEvent: false },
  { name: "colorProfile", kind: "string", isEvent: false },
  { name: "colorRendering", kind: "string", isEvent: false },
  { name: "contentScriptType", kind: "string", isEvent: false },
  { name: "contentStyleType", kind: "string", isEvent: false },
  { name: "cursor", kind: "string", isEvent: false },
  { name: "cx", kind: "string", isEvent: false },
  { name: "cy", kind: "string", isEvent: false },
  { name: "d", kind: "string", isEvent: false },
  { name: "decelerate", kind: "string", isEvent: false },
  { name: "descent", kind: "string", isEvent: false },
  { name: "diffuseConstant", kind: "string", isEvent: false },
  { name: "direction", kind: "string", isEvent: false },
  { name: "display", kind: "string", isEvent: false },
  { name: "divisor", kind: "string", isEvent: false },
  { name: "dominantBaseline", kind: "string", isEvent: false },
  { name: "dur", kind: "string", isEvent: false },
  { name: "dx", kind: "string", isEvent: false },
  { name: "dy", kind: "string", isEvent: false },
  { name: "edgeMode", kind: "string", isEvent: false },
  { name: "elevation", kind: "string", isEvent: false },
  { name: "enableBackground", kind: "string", isEvent: false },
  { name: "end_", kind: "string", isEvent: false }, /* use this one. Previous one is deprecated */
  { name: "exponent", kind: "string", isEvent: false },
  { name: "externalResourcesRequired", kind: "string", isEvent: false },
  { name: "fill", kind: "string", isEvent: false },
  { name: "fillOpacity", kind: "string", isEvent: false },
  { name: "fillRule", kind: "string", isEvent: false },
  { name: "filter", kind: "string", isEvent: false },
  { name: "filterRes", kind: "string", isEvent: false },
  { name: "filterUnits", kind: "string", isEvent: false },
  { name: "floodColor", kind: "string", isEvent: false },
  { name: "floodOpacity", kind: "string", isEvent: false },
  { name: "focusable", kind: "string", isEvent: false },
  { name: "fontFamily", kind: "string", isEvent: false },
  { name: "fontSize", kind: "string", isEvent: false },
  { name: "fontSizeAdjust", kind: "string", isEvent: false },
  { name: "fontStretch", kind: "string", isEvent: false },
  { name: "fontStyle", kind: "string", isEvent: false },
  { name: "fontVariant", kind: "string", isEvent: false },
  { name: "fontWeight", kind: "string", isEvent: false },
  { name: "fomat", kind: "string", isEvent: false },
  { name: "from", kind: "string", isEvent: false },
  { name: "fx", kind: "string", isEvent: false },
  { name: "fy", kind: "string", isEvent: false },
  { name: "g1", kind: "string", isEvent: false },
  { name: "g2", kind: "string", isEvent: false },
  { name: "glyphName", kind: "string", isEvent: false },
  { name: "glyphOrientationHorizontal", kind: "string", isEvent: false },
  { name: "glyphOrientationVertical", kind: "string", isEvent: false },
  { name: "glyphRef", kind: "string", isEvent: false },
  { name: "gradientTransform", kind: "string", isEvent: false },
  { name: "gradientUnits", kind: "string", isEvent: false },
  { name: "hanging", kind: "string", isEvent: false },
  { name: "horizAdvX", kind: "string", isEvent: false },
  { name: "horizOriginX", kind: "string", isEvent: false },
  { name: "ideographic", kind: "string", isEvent: false },
  { name: "imageRendering", kind: "string", isEvent: false },
  { name: "in_", kind: "string", isEvent: false }, /* use this one. Previous one is deprecated */
  { name: "in2", kind: "string", isEvent: false },
  { name: "intercept", kind: "string", isEvent: false },
  { name: "k", kind: "string", isEvent: false },
  { name: "k1", kind: "string", isEvent: false },
  { name: "k2", kind: "string", isEvent: false },
  { name: "k3", kind: "string", isEvent: false },
  { name: "k4", kind: "string", isEvent: false },
  { name: "kernelMatrix", kind: "string", isEvent: false },
  { name: "kernelUnitLength", kind: "string", isEvent: false },
  { name: "kerning", kind: "string", isEvent: false },
  { name: "keyPoints", kind: "string", isEvent: false },
  { name: "keySplines", kind: "string", isEvent: false },
  { name: "keyTimes", kind: "string", isEvent: false },
  { name: "lengthAdjust", kind: "string", isEvent: false },
  { name: "letterSpacing", kind: "string", isEvent: false },
  { name: "lightingColor", kind: "string", isEvent: false },
  { name: "limitingConeAngle", kind: "string", isEvent: false },
  { name: "local", kind: "string", isEvent: false },
  { name: "markerEnd", kind: "string", isEvent: false },
  { name: "markerHeight", kind: "string", isEvent: false },
  { name: "markerMid", kind: "string", isEvent: false },
  { name: "markerStart", kind: "string", isEvent: false },
  { name: "markerUnits", kind: "string", isEvent: false },
  { name: "markerWidth", kind: "string", isEvent: false },
  { name: "mask", kind: "string", isEvent: false },
  { name: "maskContentUnits", kind: "string", isEvent: false },
  { name: "maskUnits", kind: "string", isEvent: false },
  { name: "mathematical", kind: "string", isEvent: false },
  { name: "mode", kind: "string", isEvent: false },
  { name: "numOctaves", kind: "string", isEvent: false },
  { name: "offset", kind: "string", isEvent: false },
  { name: "opacity", kind: "string", isEvent: false },
  { name: "operator", kind: "string", isEvent: false },
  { name: "order", kind: "string", isEvent: false },
  { name: "orient", kind: "string", isEvent: false },
  { name: "orientation", kind: "string", isEvent: false },
  { name: "origin", kind: "string", isEvent: false },
  { name: "overflow", kind: "string", isEvent: false },
  { name: "overflowX", kind: "string", isEvent: false },
  { name: "overflowY", kind: "string", isEvent: false },
  { name: "overlinePosition", kind: "string", isEvent: false },
  { name: "overlineThickness", kind: "string", isEvent: false },
  { name: "paintOrder", kind: "string", isEvent: false },
  { name: "panose1", kind: "string", isEvent: false },
  { name: "pathLength", kind: "string", isEvent: false },
  { name: "patternContentUnits", kind: "string", isEvent: false },
  { name: "patternTransform", kind: "string", isEvent: false },
  { name: "patternUnits", kind: "string", isEvent: false },
  { name: "pointerEvents", kind: "string", isEvent: false },
  { name: "points", kind: "string", isEvent: false },
  { name: "pointsAtX", kind: "string", isEvent: false },
  { name: "pointsAtY", kind: "string", isEvent: false },
  { name: "pointsAtZ", kind: "string", isEvent: false },
  { name: "preserveAlpha", kind: "string", isEvent: false },
  { name: "preserveAspectRatio", kind: "string", isEvent: false },
  { name: "primitiveUnits", kind: "string", isEvent: false },
  { name: "r", kind: "string", isEvent: false },
  { name: "radius", kind: "string", isEvent: false },
  { name: "refX", kind: "string", isEvent: false },
  { name: "refY", kind: "string", isEvent: false },
  { name: "renderingIntent", kind: "string", isEvent: false },
  { name: "repeatCount", kind: "string", isEvent: false },
  { name: "repeatDur", kind: "string", isEvent: false },
  { name: "requiredExtensions", kind: "string", isEvent: false },
  { name: "requiredFeatures", kind: "string", isEvent: false },
  { name: "restart", kind: "string", isEvent: false },
  { name: "result", kind: "string", isEvent: false },
  { name: "rotate", kind: "string", isEvent: false },
  { name: "rx", kind: "string", isEvent: false },
  { name: "ry", kind: "string", isEvent: false },
  { name: "scale", kind: "string", isEvent: false },
  { name: "seed", kind: "string", isEvent: false },
  { name: "shapeRendering", kind: "string", isEvent: false },
  { name: "slope", kind: "string", isEvent: false },
  { name: "spacing", kind: "string", isEvent: false },
  { name: "specularConstant", kind: "string", isEvent: false },
  { name: "specularExponent", kind: "string", isEvent: false },
  { name: "speed", kind: "string", isEvent: false },
  { name: "spreadMethod", kind: "string", isEvent: false },
  { name: "startOffset", kind: "string", isEvent: false },
  { name: "stdDeviation", kind: "string", isEvent: false },
  { name: "stemh", kind: "string", isEvent: false },
  { name: "stemv", kind: "string", isEvent: false },
  { name: "stitchTiles", kind: "string", isEvent: false },
  { name: "stopColor", kind: "string", isEvent: false },
  { name: "stopOpacity", kind: "string", isEvent: false },
  { name: "strikethroughPosition", kind: "string", isEvent: false },
  { name: "strikethroughThickness", kind: "string", isEvent: false },
  /* string", */
  { name: "stroke", kind: "string", isEvent: false },
  { name: "strokeDasharray", kind: "string", isEvent: false },
  { name: "strokeDashoffset", kind: "string", isEvent: false },
  { name: "strokeLinecap", kind: "string", isEvent: false },
  { name: "strokeLinejoin", kind: "string", isEvent: false },
  { name: "strokeMiterlimit", kind: "string", isEvent: false },
  { name: "strokeOpacity", kind: "string", isEvent: false },
  { name: "strokeWidth", kind: "string", isEvent: false },
  { name: "surfaceScale", kind: "string", isEvent: false },
  { name: "systemLanguage", kind: "string", isEvent: false },
  { name: "tableValues", kind: "string", isEvent: false },
  { name: "targetX", kind: "string", isEvent: false },
  { name: "targetY", kind: "string", isEvent: false },
  { name: "textAnchor", kind: "string", isEvent: false },
  { name: "textDecoration", kind: "string", isEvent: false },
  { name: "textLength", kind: "string", isEvent: false },
  { name: "textRendering", kind: "string", isEvent: false },
  { name: "to_", kind: "string", isEvent: false }, /* use this one. Previous one is deprecated */
  { name: "transform", kind: "string", isEvent: false },
  { name: "u1", kind: "string", isEvent: false },
  { name: "u2", kind: "string", isEvent: false },
  { name: "underlinePosition", kind: "string", isEvent: false },
  { name: "underlineThickness", kind: "string", isEvent: false },
  { name: "unicode", kind: "string", isEvent: false },
  { name: "unicodeBidi", kind: "string", isEvent: false },
  { name: "unicodeRange", kind: "string", isEvent: false },
  { name: "unitsPerEm", kind: "string", isEvent: false },
  { name: "vAlphabetic", kind: "string", isEvent: false },
  { name: "vHanging", kind: "string", isEvent: false },
  { name: "vIdeographic", kind: "string", isEvent: false },
  { name: "vMathematical", kind: "string", isEvent: false },
  { name: "values", kind: "string", isEvent: false },
  { name: "vectorEffect", kind: "string", isEvent: false },
  { name: "version", kind: "string", isEvent: false },
  { name: "vertAdvX", kind: "string", isEvent: false },
  { name: "vertAdvY", kind: "string", isEvent: false },
  { name: "vertOriginX", kind: "string", isEvent: false },
  { name: "vertOriginY", kind: "string", isEvent: false },
  { name: "viewBox", kind: "string", isEvent: false },
  { name: "viewTarget", kind: "string", isEvent: false },
  { name: "visibility", kind: "string", isEvent: false },
  /*width::string? =>*/
  { name: "widths", kind: "string", isEvent: false },
  { name: "wordSpacing", kind: "string", isEvent: false },
  { name: "writingMode", kind: "string", isEvent: false },
  { name: "x", kind: "string", isEvent: false },
  { name: "x1", kind: "string", isEvent: false },
  { name: "x2", kind: "string", isEvent: false },
  { name: "xChannelSelector", kind: "string", isEvent: false },
  { name: "xHeight", kind: "string", isEvent: false },
  { name: "xlinkActuate", kind: "string", isEvent: false },
  { name: "xlinkArcrole", kind: "string", isEvent: false },
  { name: "xlinkHref", kind: "string", isEvent: false },
  { name: "xlinkRole", kind: "string", isEvent: false },
  { name: "xlinkShow", kind: "string", isEvent: false },
  { name: "xlinkTitle", kind: "string", isEvent: false },
  { name: "xlinkType", kind: "string", isEvent: false },
  { name: "xmlns", kind: "string", isEvent: false },
  { name: "xmlnsXlink", kind: "string", isEvent: false },
  { name: "xmlBase", kind: "string", isEvent: false },
  { name: "xmlLang", kind: "string", isEvent: false },
  { name: "xmlSpace", kind: "string", isEvent: false },
  { name: "y", kind: "string", isEvent: false },
  { name: "y1", kind: "string", isEvent: false },
  { name: "y2", kind: "string", isEvent: false },
  { name: "yChannelSelector", kind: "string", isEvent: false },
  { name: "z", kind: "string", isEvent: false },
  { name: "zoomAndPan", kind: "string", isEvent: false },
  /* RDFa */
  { name: "about", kind: "string", isEvent: false },
  { name: "datatype", kind: "string", isEvent: false },
  { name: "inlist", kind: "string", isEvent: false },
  { name: "prefix", kind: "string", isEvent: false },
  { name: "property", kind: "string", isEvent: false },
  { name: "resource", kind: "string", isEvent: false },
  { name: "typeof", kind: "string", isEvent: false },
  { name: "vocab", kind: "string", isEvent: false },
  /* react-specific */
  { name: "suppressContentEditableWarning", kind: "bool", isEvent: false },
  /* dangerouslySetInnerHTML */
];
